'''
给你一个 32 位的有符号整数 x ，返回 x 中每位上的数字反转后的结果。

如果反转后整数超过 32 位的有符号整数的范围 [−2^31,  2^31 − 1] ，就返回 0。

假设环境不允许存储 64 位整数（有符号或无符号）。
 

示例 1：

输入：x = 123
输出：321
示例 2：

输入：x = -123
输出：-321
示例 3：

输入：x = 120
输出：21
示例 4：

输入：x = 0
输出：0

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-integer
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''

class Solution:
    maxv = 2**31 - 1
    minv = -2**31
    print(maxv,minv)
    def reverse(self, x):
        
        s = str(x)
        if x >= 0:
            #自然数
            l = list(s)
            l.reverse()#返回值为空，直接调整列表
            lj = ''.join(l)
            n = int(lj)
            print(lj,n)
            if n > self.maxv:#修正越界错误
                return 0
            else:
                return n
        else:
            #负数
            l = list(s[1:])
            l.reverse()#返回值为空，直接调整列表
            lj = '-' + ''.join(l)
            n = int(lj)
            print(lj,n)
            if n < self.minv:##修正越界错误
                return 0
            else:
                return n
            

s = Solution()
s.reverse(-120300000)

'''
知识补充：
如果以最高位为符号位，二进制原码最大为0111111111111111=2^15-1=32767 最小为1111111111111111=-（2^15-1）=-32767 
此时0有两种表示方法，即正0和负0：0000000000000000=1000000000000000=0 
所以，二进制原码表示时，范围是-32767～-0和0～32767，因为有两个零的存在，所以不同的数值个数一共只有2^16-1个，比16位二进制能够提供的2^16个编码少1个。 
但是计算机中采用二进制补码存储数据，即正数编码不变，从0000000000000000到0111111111111111依旧表示0到32767，
而负数需要把除符号位以后的部分取反加1，即-32767的补码为1000000000000001。 
到此，再来看原码的正0和负0：0000000000000000和1000000000000000，补码表示中，前者的补码还是0000000000000000，后者经过非符号位取反加1后，同样变成了
0000000000000000，也就是正0和负0在补码系统中的编码是一样的。
但是，我们知道，16位二进制数可以表示216个编码，而在补码中零的编码只有一个，也就是补码中会比原码多一个编码出来，这个编码就是1000000000000000，
因为任何一个原码都不可能在转成补码时变成1000000000000000。所以，人为规定1000000000000000这个补码编码为-32768。 所以，补码系统中，范围是-32768～32767。 
因此，实际上，二进制的最小数确实是1111111111111111，只是二进制补码的最小值才是1000000000000000，而补码的1111111111111111是二进制值的-1。 ”


因为当时的计算机普遍是16位，而现在的计算机普遍32位，所以上面的结论也就相应的变成了-2的31次方减一到2的31次方减一。这样的话范围是-2147483647~2147483647 
但是由于人为规定的100000…000（31个0）为-2147483648，所以范围就变成了-2147483648~2147483647 。
————————————————
版权声明：本文为CSDN博主「WmxL56」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/WmxL56/article/details/38380627
'''